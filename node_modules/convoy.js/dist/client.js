"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
var errors_1 = require("./utils/errors");
var axios = require('axios').default;
var Client = /** @class */ (function () {
    function Client(options) {
        this.baseUri = 'https://dashboard.getconvoy.io/api/v1';
        if (!options.api_key) {
            throw new errors_1.ConfigException('API Key is required');
        }
        if (!options.project_id) {
            throw new errors_1.ConfigException('Project ID is required');
        }
        this.request = axios.create({
            baseURL: "".concat(this.getBaseUrl(options.uri), "/projects/").concat(options.project_id),
            headers: {
                Authorization: "Bearer ".concat(options.api_key),
                'Content-Type': 'application/json',
            },
        });
        if (options.sqsOptions) {
            this.sqs = options.sqsOptions;
        }
        if (options.kafkaOptions) {
            this.kafka = options.kafkaOptions;
        }
    }
    Client.prototype.getBaseUrl = function (uri) {
        return uri ? uri : this.baseUri;
    };
    Client.prototype.httpGet = function (path, query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request.get(this.buildPath(path, query))];
            });
        });
    };
    Client.prototype.httpPost = function (path, data, query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request.post(this.buildPath(path, query), data)];
            });
        });
    };
    Client.prototype.httpPut = function (path, data, query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request.put(this.buildPath(path, query), data)];
            });
        });
    };
    Client.prototype.httpDelete = function (path, data, query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request.delete(this.buildPath(path, query), data)];
            });
        });
    };
    Client.prototype.buildPath = function (path, query) {
        if (this.hasQueryParameters(query)) {
            path = "".concat(path, "?").concat(this.buildQueryParams(query));
        }
        return path;
    };
    Client.prototype.buildQueryParams = function (query) {
        return new URLSearchParams(query).toString();
    };
    Client.prototype.hasQueryParameters = function (query) {
        return query && Object.getOwnPropertyNames(query).length > 0;
    };
    return Client;
}());
exports.Client = Client;
